---
- name: Setting up the environment for the boilerplate application 
  hosts: hng
  become: yes
  vars:
    # Variables for the setup
    git_branch_name: "devops"
    git_repo_url: "https://github.com/hngprojects/hng_boilerplate_python_fastapi_web.git"
    local_repo_path: "/opt/stage_5b"
    virtual_env: ".venv"
    deployment_user: "hng"
    app_port: 3000
    nginx_http_port: 80
    log_stderr_path: "/var/log/stage_5b/error.log"
    log_stdout_path: "/var/log/stage_5b/out.log"
    pg_cred_path: "/var/secrets/pg_pw.txt"
    pg_database_name: "neyo_db"
    pg_admin_user: "neyo"
    pg_admin_password: "hng@stress"
    

  tasks:
    # Check if the sudo group exists
    - name: Check if sudo group exists
      command: getent group sudo
      register: sudo_group
      ignore_errors: true

    # Create the sudo group if it doesn't exist
    - name: Create sudo group if it doesn't exist
      group:
        name: sudo
        state: present
      when: sudo_group.rc != 0

    # Ensure the sudo group has root privileges
    - name: Ensure sudo group has root privileges
      lineinfile:
        path: /etc/sudoers
        state: present
        regexp: '^%sudo'
        line: '%sudo ALL=(ALL:ALL) ALL'
        validate: '/usr/sbin/visudo -cf %s'

    # Create the deployment user and add to sudo group
    - name: Create deployment user
      user:
        name: "{{ deployment_user }}"
        groups: sudo
        append: yes
        state: present
        shell: /bin/bash

    # Grant the deployment user sudo privileges without password
    - name: Grant deployment user sudo privileges without password
      lineinfile:
        path: /etc/sudoers
        state: present
        regexp: '^{{ deployment_user }}'
        line: '{{ deployment_user }} ALL=(ALL) NOPASSWD:ALL'
        validate: '/usr/sbin/visudo -cf %s'

    # Create the directory for logs
    - name: Create /var/log/stage_5b directory
      file:
        path: /var/log/stage_5b
        state: directory
        owner: "{{ deployment_user }}"
        group: "{{ deployment_user }}"
        mode: '0755'

    # Ensure log files exist
    - name: Ensure log files exist
      file:
        path: "{{ item }}"
        state: touch
        owner: "{{ deployment_user }}"
        group: "{{ deployment_user }}"
        mode: '0644'
      with_items:
        - "{{ log_stderr_path }}"
        - "{{ log_stdout_path }}"

    # Create the local repository path
    - name: Create local repository path
      file:
        path: "{{ local_repo_path }}"
        state: directory
        owner: "{{ deployment_user }}"
        group: "{{ deployment_user }}"
        mode: '0755'

    # Clone the repository
    - name: Clone the repository
      git:
        repo: "{{ git_repo_url }}"
        dest: "{{ local_repo_path }}"
        version: "{{ git_branch_name }}"
        force: yes
      become_user: "{{ deployment_user }}"
      register: git_output

    # Debug the git clone output
    - name: Debug git_output
      debug:
        var: git_output

    # Append git clone stdout to the log file
    - name: Append git clone stdout to log
      shell: |
        echo "{{ git_output.after }}" >> "{{ log_stdout_path }}"
      when: git_output.after is defined and git_output.after != ""

    # Append git clone stderr to the log file
    - name: Append git clone stderr to log
      shell: |
        echo "{{ git_output.before }}" >> "{{ log_stderr_path }}"
      when: git_output.before is defined and git_output.before != ""

    # Ensure python3.12-venv is installed
    - name: Ensure python3.12-venv is installed
      ansible.builtin.apt:
        name: python3.12-venv
        state: present
        update_cache: yes

    # Ensure python3-psycopg2 is installed
    - name: Ensure python3-psycopg2 is installed
      ansible.builtin.apt:
        name: python3-psycopg2
        state: present
        update_cache: yes

    # Create a virtual environment
    - name: Create virtual environment
      command: python3 -m venv "{{ local_repo_path }}/{{ virtual_env }}"
      become_user: "{{ deployment_user }}"
      args:
        chdir: "{{ local_repo_path }}"
      register: venv_output

    # Append virtual environment creation stdout to log file
    - name: Append virtualenv creation stdout to log
      shell: |
        echo "{{ venv_output.stdout }}" >> "{{ log_stdout_path }}"
      when: venv_output.stdout is defined and venv_output.stdout != ""

    # Append virtual environment creation stderr to log file
    - name: Append virtualenv creation stderr to log
      shell: |
        echo "{{ venv_output.stderr }}" >> "{{ log_stderr_path }}"
      when: venv_output.stderr is defined and venv_output.stderr != ""

    # Activate the virtual environment and display its path
    - name: Activate virtual environment and display its path
      shell: |
        . {{ local_repo_path }}/{{ virtual_env }}/bin/activate && echo $VIRTUAL_ENV
      register: venv_path
      become_user: "{{ deployment_user }}"
      args:
        executable: /bin/bash

    # Append virtual environment activation stdout to log file
    - name: Append virtual environment activation stdout to log
      shell: |
        echo "{{ venv_path.stdout }}" >> "{{ log_stdout_path }}"
      when: venv_path.stdout is defined and venv_path.stdout != ""

    # Append virtual environment activation stderr to log file
    - name: Append virtual environment activation stderr to log
      shell: |
        echo "{{ venv_path.stderr }}" >> "{{ log_stderr_path }}"
      when: venv_path.stderr is defined and venv_path.stderr != ""

    # Print virtual environment path
    - name: Print virtual environment path
      debug:
        msg: "Virtual environment path: {{ venv_path.stdout }}"

    # Install dependencies from requirements.txt
    - name: Install dependencies from requirements.txt
      pip:
        requirements: "{{ local_repo_path }}/requirements.txt"
        virtualenv: "{{ local_repo_path }}/{{ virtual_env }}"
      become_user: "{{ deployment_user }}"
      register: pip_output

    # Append pip install stdout to log file
    - name: Append pip install stdout to log
      shell: |
        echo "{{ pip_output.stdout }}" >> "{{ log_stdout_path }}"
      when: pip_output.stdout is defined and pip_output.stdout != ""

    # Append pip install stderr to log file
    - name: Append pip install stderr to log
      shell: |
        echo "{{ pip_output.stderr }}" >> "{{ log_stderr_path }}"
      when: pip_output.stderr is defined and pip_output.stderr != ""

    # Create /var/secrets directory
    - name: Create "/var/secrets"
      file:
        path: /var/secrets
        state: directory
        owner: hng
        group: hng
        mode: '0755'

    # Ensure pg_cred_path file exists and has correct permissions
    - name: Ensure pg_cred_path file exists and has correct permissions
      file:
        path: "{{ pg_cred_path }}"
        state: touch
        owner: "{{ deployment_user }}"
        group: "{{ deployment_user }}"
        mode: '0600'
      register: pg_cred_output

    # Append pg_cred_path file creation stdout to log file
    - name: Append pg_cred_path file creation stdout to log
      shell: |
        echo "{{ pg_cred_output.stdout }}" >> "{{ log_stdout_path }}"
      when: pg_cred_output.stdout is defined and pg_cred_output.stdout != ""

    # Append pg_cred_path file creation stderr to log file
    - name: Append pg_cred_path file creation stderr to log
      shell: |
        echo "{{ pg_cred_output.stderr }}" >> "{{ log_stderr_path }}"
      when: pg_cred_output.stderr is defined and pg_cred_output.stderr != ""

    # Install PostgreSQL
    - name: Install PostgreSQL
      apt:
        name: postgresql
        state: present
      register: install_postgres_output

    # Append install PostgreSQL stdout to log file
    - name: Append install PostgreSQL stdout to log
      shell: |
        echo "{{ install_postgres_output.stdout }}" >> "{{ log_stdout_path }}"
      when: install_postgres_output.stdout is defined and install_postgres_output.stdout != ""

    # Append install PostgreSQL stderr to log file
    - name: Append install PostgreSQL stderr to log
      shell: |
        echo "{{ install_postgres_output.stderr }}" >> "{{ log_stderr_path }}"
      when: install_postgres_output.stderr is defined and install_postgres_output.stderr != ""

    # Ensure PostgreSQL service is running and enabled
    - name: Ensure PostgreSQL service is running
      service:
        name: postgresql
        state: started
        enabled: yes
      register: postgres_service_output

    # Append PostgreSQL service stdout to log file
    - name: Append PostgreSQL service stdout to log
      shell: |
        echo "{{ postgres_service_output.stdout }}" >> "{{ log_stdout_path }}"
      when: postgres_service_output.stdout is defined and postgres_service_output.stdout != ""

    # Append PostgreSQL service stderr to log file
    - name: Append PostgreSQL service stderr to log
      shell: |
        echo "{{ postgres_service_output.stderr }}" >> "{{ log_stderr_path }}"
      when: postgres_service_output.stderr is defined and postgres_service_output.stderr != ""

    # Create PostgreSQL database
    - name: Create PostgreSQL database and admin user
      become_user: postgres
      community.postgresql.postgresql_db:
        name: "{{ pg_database_name }}"
        state: present
      register: create_db_output

    # Append create PostgreSQL database stdout to log file
    - name: Append create PostgreSQL database stdout to log
      shell: |
        echo "{{ create_db_output.stdout }}" >> "{{ log_stdout_path }}"
      when: create_db_output.stdout is defined and create_db_output.stdout != ""

    # Append create PostgreSQL database stderr to log file
    - name: Append create PostgreSQL database stderr to log
      shell: |
        echo "{{ create_db_output.stderr }}" >> "{{ log_stderr_path }}"
      when: create_db_output.stderr is defined and create_db_output.stderr != ""

    # Create PostgreSQL admin user
    - name: Create PostgreSQL admin user
      become_user: postgres
      community.postgresql.postgresql_user:
        name: "{{ pg_admin_user }}"
        password: "{{ pg_admin_password }}"
        db: "{{ pg_database_name }}"
        priv: "ALL"
        state: present
      register: create_user_output

    # Append create PostgreSQL admin user stdout to log file
    - name: Append create PostgreSQL admin user stdout to log
      shell: |
        echo "{{ create_user_output.stdout }}" >> "{{ log_stdout_path }}"
      when: create_user_output.stdout is defined and create_user_output.stdout != ""

    # Append create PostgreSQL admin user stderr to log file
    - name: Append create PostgreSQL admin user stderr to log
      shell: |
        echo "{{ create_user_output.stderr }}" >> "{{ log_stderr_path }}"
      when: create_user_output.stderr is defined and create_user_output.stderr != ""

    # Save PostgreSQL admin credentials to pg_cred_path
    - name: Save PostgreSQL admin credentials to pg_cred_path
      copy:
        content: "postgres://{{ pg_admin_user }}:{{ pg_admin_password }}@localhost:5432/{{ pg_database_name }}"
        dest: "{{ pg_cred_path }}"
        owner: "{{ deployment_user }}"
        group: "{{ deployment_user }}"
        mode: '0600'

    # Create dummy table in PostgreSQL database
    - name: Create dummy table in PostgreSQL database
      become_user: postgres
      postgresql_query:
        db: "{{ pg_database_name }}"
        query: "CREATE TABLE IF NOT EXISTS dummy_table (column1 VARCHAR(255), column2 VARCHAR(255));"

    # Insert dummy data into the dummy table
    - name: Create dummy data in PostgreSQL database
      become_user: postgres
      postgresql_query:
        db: "{{ pg_database_name }}"
        query: "INSERT INTO dummy_table (column1, column2) VALUES ('dummy1', 'dummy2');"

    # Copy .env.sample to .env
    - name: Copy .env.sample to .env
      copy:
        src: "{{ local_repo_path }}/.env.sample"
        dest: "{{ local_repo_path }}/.env"
        owner: "{{ deployment_user }}"
        group: "{{ deployment_user }}"
        mode: '0644'
        remote_src: yes

    # Update .env file with Postgres URL
    - name: Update .env file with Postgres URL
      lineinfile:
        path: "{{ local_repo_path }}/.env"
        regexp: '^DB_URL='
        line: "DB_URL=postgresql://{{ pg_admin_user }}:{{ pg_admin_password }}@localhost:5432/{{ pg_database_name }}"

    # Update .env file with Postgres database name
    - name: Update .env file with Postgres details
      lineinfile:
        path: "{{ local_repo_path }}/.env"
        regexp: '^DB_NAME='
        line: "DB_NAME={{ pg_database_name }}"

    # Update .env file with Postgres user
    - name: Update .env file with Postgres user
      lineinfile:
        path: "{{ local_repo_path }}/.env"
        regexp: '^DB_USER='
        line: "DB_USER={{ pg_admin_user }}"

    # Update .env file with Postgres password
    - name: Update .env file with Postgres password
      lineinfile:
        path: "{{ local_repo_path }}/.env"
        regexp: '^DB_PASSWORD='
        line: "DB_PASSWORD={{ pg_admin_password }}"

    # # Update .env file with RabbitMQ URL
    # - name: Update .env file with RabbitMQ URL
    #   lineinfile:
    #     path: "{{ local_repo_path }}/.env"
    #     regexp: '^RABBITMQ_URL='
    #     line: "RABBITMQ_URL=amqp://{{ rabbitmq_user }}:{{ rabbitmq_password }}@localhost:5672/{{ rabbitmq_vhost }}"

    # Update main.py to run on port 3000
    - name: Update main.py to run on port 3000
      replace:
        path: "{{ local_repo_path }}/main.py"
        regexp: 'port=7001'
        replace: 'port={{ app_port }}'

    # Run the FastAPI application server
    - name: Run the FastAPI application server
      shell: |
        . {{ local_repo_path }}/{{ virtual_env }}/bin/activate
        nohup uvicorn main:app --host 0.0.0.0 --port {{ app_port }} >> "{{ log_stdout_path }}" 2>> "{{ log_stderr_path }}" &
      args:
        chdir: "{{ local_repo_path }}"
      become_user: "{{ deployment_user }}"
      async: 0
      poll: 5
      register: app_run_output

    # Append application run stdout to log file
    - name: Append application run stdout to log
      shell: |
        echo "{{ app_run_output.stdout }}" >> "{{ log_stdout_path }}"
      when: app_run_output.stdout is defined and app_run_output.stdout != ""

    # Append application run stderr to log file
    - name: Append application run stderr to log
      shell: |
        echo "{{ app_run_output.stderr }}" >> "{{ log_stderr_path }}"
      when: app_run_output.stderr is defined and app_run_output.stderr != ""

    # Add the Nginx official repository key
    - name: Add the Nginx official repository key
      ansible.builtin.apt_key:
        url: http://nginx.org/keys/nginx_signing.key
        state: present
      become: yes

    # Add the Nginx official repository
    - name: Add the Nginx official repository
      ansible.builtin.apt_repository:
        repo: "deb http://nginx.org/packages/ubuntu/ {{ ansible_distribution_release }} nginx"
        state: present
      become: yes
      register: install_nginx_output

    # Install Nginx 1.26
    - name: Install Nginx 1.26
      apt:
        name: nginx=1.26.0-1~{{ ansible_distribution_release }}
        state: present
      register: install_nginx_output  

    # Append install Nginx stdout to log file
    - name: Append install Nginx stdout to log
      shell: |
        echo "{{ install_nginx_output.stdout }}" >> "{{ log_stdout_path }}"
      when: install_nginx_output.stdout is defined and install_nginx_output.stdout != ""

    # Append install Nginx stderr to log file
    - name: Append install Nginx stderr to log
      shell: |
        echo "{{ install_nginx_output.stderr }}" >> "{{ log_stderr_path }}"
      when: install_nginx_output.stderr is defined and install_nginx_output.stderr != ""

    # Remove default Nginx site configuration
    - name: Remove default Nginx site configuration
      file:
        path: /etc/nginx/conf.d/default.conf
        state: absent
      notify:
        - restart nginx

    # Copy custom Nginx configuration from template
    - name: Copy custom Nginx configuration
      template:
        src: nginx.conf.j2
        dest: /etc/nginx/conf.d/default.conf
      notify:
        - restart nginx

  # Handlers to restart Nginx service
  handlers:
    - name: restart nginx
      service:
        name: nginx
        state: restarted